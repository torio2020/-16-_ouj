>>> print("Hello,Python!")
Hello,Python!
>>> x = 1
>>> x
1
>>> x = x + 1
>>> x
2 # =は代入を表していて、等式を表しているわけではない

数値以外も代入できる
>>> x = "ABC"
>>> x
'ABC'
「文字列型データ　+ 文字列型データ」
>>> "ABC" + "123"
'ABC123'
「整数型データ　* 文字列型データ」
>>> 3 * "ABC"
'ABCABCABC'
>>> "ABC" + 123　#""で囲ってないのでエラーが出る
エラーメッセージ
「浮動小数型データ * 文字列型データ」は定義されていないためエラーが出る
>>> 2.0 * "ABC"
エラーメッセージ

文字列データは文字の系列であり、添字、またはインデックスと呼ばれる番号を用いて、文字列中の文字を取り出す。
>>> x = "ABCDE"
>>> x[0]
'A'
>>> x[1]
'B'
>>> x[4]
'E'
>>> x[5]
エラーメッセージ

リスト：数値や文字列を順序付けて並べたデータ
>>> ["A", "B", "C", "4", "5", "6"]
['A', 'B', 'C', '4', '5', '6']
>>> ["A", "B", "C", 4, 5, 6]
['A', 'B', 'C', 4, 5, 6]
リストはリストを要素とすることもできる
>>> ["A", 2, [3, "D", 5]]
['A', 2, [3, 'D', 5]]
要素に値を代入することもできる
>>> x = ["A", 2, [3, "D", 5]]
>>> x[0]
'A'
>>> x[2]
[3, 'D', 5]
>>> x[2][0]
3
>>> x[2][1] = 4
>>> x
['A', 2, [3, 4, 5]]

if文:データ等の条件により命令を変える
>>> x = -1
>>> if x < 0:
	print("負の数")
else:
	print("非負の数")

	
負の数
>>> x = 0
>>> if x < 0:
	("負の数")
elif x == 0:
	print("ゼロ")
else:
	print("正の数")

	
ゼロ

while文：ある条件を満たすまで繰り返し処理を行いたい
>>> x = 100
>>> while x > 0:
	print(x)
	x = x/2 - 10

	
100
40.0
10.0

continue文：特定の条件を満たしたらループ内の処理を中断する
>>> x = 40
>>> while x > 0:
	x = x - 10
	if x == 20:
		continue
	print(x)

	
30
10
0
この例ではxが20の時にはcontinueにより次の行の命令print(x)が行われない

break文：繰り返しの実行中に特定の条件を満たしたら、ループ内の処理を中止する
>>> x = 40
>>> while x > 0:
	x = x - 10
	if x == 20:
		break
	print(x)

	
30

len():組み込み関数。シーケンス型のデータの要素数を返す関数
>>> x = [1, "b", [3, "d", 5]]
>>> len(x)
3
>>> len("ABCDE")
5
この例におけるxや”ABCDE"のように関数に渡す値のことを引数という。
一方、関数から返される値を戻り値という。

import文：モジュールを利用する
>>> import math
>>> x = math.pi/2
>>> math.sin(x) + math.cos(x)
1.0
関数の呼び出しはモジュール名と関数名をドット.で区切って呼び出す
from文：単純にsin(),cos()という形で関数を用いたいとき使う
>>> from math import sin, cos
>>> sin(x) + cos(x)
1.0

def文：関数を定義する
def関数名（引数のリスト）：と書き、その下の行に命令群を書く
return文：戻り値を指定する。
>>> def sum(x):
	s = 0
	while x > 0:　#xが０以上なら繰り返しする
		s = s + x #sは　s + x
		x = x - 1 #xを1引く
	return s

>>> sum(10)　#10 + 9 + 8 + ... + 1 = 55が戻り値として返ってくる
55
>>> s = 5
>>> sum(s)
15
>>> s　#関数が定義した変数は外に影響を与えない
5
